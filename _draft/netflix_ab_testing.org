#+TITLE: It’s All A/Bout Testing: The Netflix Experimentation Platform

Netflix가 어떻게 high-quality video와 최소한의 playback interruption인 훌륭한 스트리밍 경험을 제공하는 지 궁금해본적 있나? 혁신적인 아이디어들을 우리들의 adaptive streaming과 content delivery network 알고리즘에 적용하기 위해서 끊임없이 A/B테스트하는 엔지니어들과 데이터 과학자들로 구성된 팀에 감사한다. 더욱 더 명확한 변경은 어떨까? 예를 들면 UI layout을 완벽하게 redesign한다거나 새로 개인화된 홈페이지라면?? 그렇다. 모두 A/B 테스트 된다.

사실, 모든 프로덕트의 변경에 대해서 Netflix는 사용자의 기본적인 경험이 되기 전에 철저한 A/B 테스팅 프로세스를 거치는 것을 고려한다. 중요한 redesign은 회원들이 그들의 보고자하는 컨텐트를 더 빨리 찾을 수 있게 함으로써 서비스를 크게 개선한다. 하지만 새로운 경험이 이전것보다 더 나은지를 증명할 수 있게 해주는 확장적인 A/B 테스트 없이 이를 내보는 것은 너무 위험하다. 그리고 만약 당신이 우리가 가능한 모든 것을 진짜 테스트할수 있을까에 대해서 의문을 가진다면, 심지어 많은 title과 연관된 이미지들도 고려한다는 것을 알아둘 필요가 있다. 때때로 이런 부분들은 title을 볼 확률을 20%에서 30%로 올려준다. 

이와 같이 아주 중요한 결과들로 인해 우리는 A/B 테스트에 매우 집착한다. 프로덕트의 변화는 가장 독선적이고 강경한 Netflix 직원에 의해서 경험적인 접근으로 만들어지는 것이 아니라, 우리의 회원들 스스로가 그들이 사랑하는 경험으로 우리를 이끌어주는 실제 데이터에 의해서 이루어진다.

이 글에서는 실험 플랫폼에 대해서 이야기할 것이다. 모든 Netflix engineering 팀에 의해서 만들어지는 서비스는 특별한 engineering team의 지원을 받는 그들의 A/B 테스트를 구현할 수 있도록 한다. 우리는 현재 플랫폼의 아키텍쳐를 다루기 전에 A/B 테스팅에 대한 몇가지 고차원적인 컨텍스트를 설정하고 어떻게 서비스들이 컨텍스트들과 상호작용하면서 A/B테스트를 실제로 가능하게 하는 것인지 알아볼 것이다.

* Overview
A/B 테스팅의 일반적인 개념은 하나의 통제 그룹과 대안을 받게 되는 하나 혹은 그 이상의 실험 그룹(Netflix에서는 이를 "cell"이라고 부른다)을 생성한다는 것이다. 각 회원들은 주어진 경험을 할 수 있는 오직 하나의 cell에만 혹한다. 그리고 그 cell들 중에 하나는 항상 "default cell"로 디자인된다. 이 cell은 테스트에 포함되지 않은 모든 Netflix 회원들과 동일한 경험을 가지게 되는 control group을 대표한다. 테스트가 live되자마자, 우리는 중요하고 전형적인 스트리밍 hours와 retention의 특정 metric을 추적한다. 통계적으로 의미있는 결론을 만들어낼 수 있는 충분한 참가자가 들어왔다고 판단되면, 우리는 각 테스트 cell의 효과를 확인하고 가장 좋은 cell을 찾고자 한다.

참여자의 관점에서 보면, 각 회원은 언제든지 몇몇 A/B 테스트의 일부분이 될 수 있다. 그리고 이 테스트는 서로 충돌하지 않도록 제공된다(예를 들면 Netflix App의 같은 영역을 다른 방식으로 수정하는 두가지 테스트). 테스트 오너(owner)가 잠재적인 테스트 간의 충돌을 추적할 수 있도록 학 ㅣ위해서 우리는 플랫폼의 front end인 ABlaze에서 test schedule view를 제공한다. 이 도구는 테스트 오너가 test를 필터링해서 그들 자신이 수행할 테스트와 비슷한 영역에 영향을 미칠 것같은 테스트들을 다양한 각도로 찾을 수 있도록 해준다.

더 자세하게 들어가기 전에 다루어야 할 주제가 하나 더 있다. 그건 바로 어떻게 회원들이 주어진 테스트에 할당될 것인지이다. 우리는 할당의 두가지 형태를 제공한다 : batch와 real-time이다

Batch 할당은 분석가들이 간단하거나 복잡한 custom query를 사용해서 테스트를 생성할 수 있도록 함으로써 분석가들에게 궁극의 유연성을 제공한다. 이 쿼리들은 테스트에 추가될 고정되고 알려진 회원들의 집합을 추출한다. 이러한 접근의 주요한 단점은 새로운 고객들을 할당하는 능력이 부족하고 실시간 사용자 행동을 기반으로 할당을 할 수 없다는 것이다. 할당된 사용자의 수를 할고 있지만, 모든 할당된 사용자가 테스트를 경험할 것이라는 보장은 할 수 없다.(만약 우리가 iPhone에서 새로운 기능을 테스트하고 있는 중이라면, 테스트가 active한 동안에 iPhone으로 각 할당된 회원들이 Netflix에 접근하고 있는지를 확신할 수 없다.)

Real-Time 할당은 분석가들에게 Netflix와의 사용자 상호작용을 평가할 수 있는 룰을 설정할 수 있도록 한다. 자격이 있는 사용자들이 룰에 기술된 조건을 만족하고 현재 테스트와 충돌하지 않는다면 실시간으로 테스트에 할당된다. 결과적으로 이 접근은 batch 접근의 내재된 약점을 제거한다. 하지만 real-time 할당의 주요한 단점은 할당 결과를 기다리느라 앱이 추가적은 latency를 가질 수 있다는 것이다. 운 좋게도 우리는 종종 app이 다른 정보를 기다리는 동안 parallel로 호출한다. real-time 할당의 두번째 문제는 테스트에 할당됬으면 하는 회원들의 수가 되는 데까지 얼마나 시간이 오래 걸릴지, 분석가들이 얼마나 자주 테스트의 결과를 평가할 수 있을지를 결정하기 위한 정보를 얻기 위해 얼마나 걸릴지를 알기 힘들다는 것이다. 

* 전형적인 A/B 테스트 워크플로우
이와 같은 백그라운드를 가지고, 좀 더 깊게 들어가보자. 실험 플랫폼(다이어그램에서는 A/B로 표현됨)에서 포함하고 있는 전형적인 워크플로우는 Image Selection테스트를 위한 다음의 워크플로우를 사용하는 것이 가장 잘 설명될 수 있다. 다이어그램에는 깊게 설명하지 않은 뉘앙스들이 있다. 특히 external Netflix app과 internal service간의 gateway 역할을 하는 Netflix API layer의 아키텍쳐가 그러하다. 

이 예제에서, 우리는 특정 타이틀을 보는 많은 회원들이 이미지를 찾는 목적을 가진 가상의 A/B 테스트를 돌려보도록 하겠다. 각 cell은 후보 이미지를 표현한다. 우리의 Device App 대부분에서 유효한 동일한 플로우긴 하지만 다이어그램에서 PS4에서의 Netflix App으로부터의 호출 플로우를 가정했다.   

1. Netflix PS4 App은 Netflix API를 호출한다. 이 호출에서, 사용자와 사용자의 디바이스와 연관된 세션 레벨 정보를 포함한 JSON payload가 전달된다.

2. 호출은 PS4 App team에서 작성한 스크립트에서 의해서 실행된다. 이 스크립트는 Netflix API의 Client Adaptor Layer에서 수행된다. Client Adaptor Layer는 각 Client App 팀이 그들의 앱과 관련된 스크립트를 추가하는 곳이다. 이 스크립트들은 각각 그들의 구별된 REST에서 완벽해진다. 이는 Netflix API가 스스로 기능적으로 공통적인 부분을 대부분의 앱에게 제공하도록 하고 그들의 로직 위에서 각 앱 control을 할 수 있도록 한다. PS4 App Script는 우리팀이 관리하는 라이브러리이며 Netflix API내에 패키징된 A/B Client를 호출한다.이 라이브러리는 우리의 backend server뿐만 아니라 다른 내부의 Netflix service들과도 통신할 수 있도록 한다.

3. A/B Client는 회원과 디바이스에 대해 추가적인 context를 얻기 위해서 다른 서비스들을 호출한다.

4. A/B Client는 그리고 나서 모든 사용가능한 context를 evaluation을 위한 A/B Server에 함께 전달한다.  

5. Evaluation Phase에서
a) A/B Server는 이 회원이 이미 할당된 모든 test/cell 조합을 탐색한다.
b) batch 할당 접근을 사용하는 테스트들은, 이미 이 상태에 할당을 알게 된다.
c) real-time 할당을 사용하는 테스트들은, A/B Server가 회원이 어떤 추가적인 테스트에 할되어야만 하는 지를 보기 위해 컨텍스트를 evaluate한다. 만약 그렇다면 해당 회원들은 할당된다.
d) 한번 모든 evaluation과 할당이 끝나면, A/B 서버는 테스트와 cell의 완벽한 set을 A/B Client에 전달하고, A/B Client는 이를 PS4 App Script에 전달한다. PS4 App은 사용자가 해당 테스트에 주단위로 있었는지, 몇 ms만 있었는지에 대해서 모른다. PS4 App은 알 필요도 없고 신경쓸 필요도 없다. 

6. 주어진 test/cell 조합이 리턴되면, PS4 App Script는 이제 테스트를 현재 클라이언트 요청에 적용한 행동을 수행한다. 우리의 예제에서 보면 PS4 App Script는 이 정보를 타이틀이 보여주어야 하는 연관된 적합한 이미지를 선택하는데 사용한다. 이는 이 타이틀의 metadata를 가지고 있는 서비스에 의해서 리턴된다. 실험 플랫폼은 실제로 이 행동을 통제하지 않는 것을 기억하자: 그와 같이 행동하는 것은 주어진 테스트에 있는 각 경험을 실제로 구현한 서비스에 달려있다.

 
7. PS4 App Script는(Netflix API를 통해) PS4 App에게 어떤 image가 보여져야 하는 지를 알려준다. 모든 다른 동작처럼 PS4 App은 UI를 정확하게 렌더링 하기 위한 행동을 한다.

이제 call flow를 이해했으니 A/B server라고 표시된 박스 부분을 더 자세히 살펴보자.

* The Experimentation Platform 
이전 섹션에서 설명한 할당과 요청 참색은 REST API endpoint를 통해서 우리 서버로 전달된다. 각 test에 존재하는 Test metadata는 할당 룰을 포함하고 Cassandra data store에 저장된다. 이 할당 룰은 테스트에 참가하는 회원의 적임을 결정하기 위해 A/B Client로부터 전달된 context를 비교한다.(이 사용자가 Austrailia 사람인가? PS4 app의 이버전을 전에 전혀 사용하지 않았었는가?)

회원 할당 또한 Cassandra에 저장된다. 그리고 Cassandra는 EVCache cluster가 앞에 Cashing layer로 있어서 Cassandra로 많은 호출이 오지 못하도록 한다. app이 현재 애플리케이션을 위한 요청을 만들때, AB Client는 일단 이 회원의 존재하는 할당 기록을 위한 EVCache를 먼저 체크한다. 만약 이 정보가 이전에 지난 3시간(우리 Cache의 TTL) 이전에 요청되었었다면 할당의 복제는 EVCache로부터 리턴될 것이다. 그렇지 않다면, AB Server는 Cassandra에 직접 호출을 하고 AB Client에게 할당을 전달하고 그 정보를 EVCache에 생성한다.

A/B test에 할당이 발생할 때, 우리는 각 회원을 어떤 cell에 둘것인지를 결정해야 한다. 이 단계는 아주 신중하게 다루어져야 한다. 왜냐하면 각 cell의 인원수는 테스트에서 통계적으로 의미있는 결론을 얻기 위해서 가능한 균일해야만 한다. 균일성은 주요 디멘션의 집합으로 측정되는데, 주요 디멘션은 나라 혹은 디바이스 타입이 가장 눈에 잘 띄는 요소들 중 하나이다. 결론적으로 우리의 목표는 각 cell이 각 디바이스 타입의 유사한 비율을 사용해서 각 나라 회원들의 유사한 비율을 유지 하는 것이다. Purely random sampling은 테스트 결과를 편향되게 할 수 있다. 예를 들어 더 많은 Aurstralian game console user를 하나의 셀에 할당하는것과 그렇지 않은것이다. 이 이슈를 완화시키기 위해서 우리는 stratified sampling라고 불리는 샘플링 방법을 채택했다. stratified sampling은 앞서 언급한 주요 디멘션들에 걸쳐 균일성을 유지하는 것에 초점을 맞춘다. stratified sampling에 대한 우리의 구현은 상당히 복잡한데 이는 나중에 블로그에서 공유할 예정이다.

할당 프로세스의 마지막 단계에서, 우리는 할당 상세 내역을 Cassandra에 저장하고 이 회원과 관련된 A/B cache를 invalidate한다. 결과적으로 다음에 이 회원의 할당을 위한 요청을 받으면 우리는 cashe miss를 내고 위에 설명한 cash related step을 밟을 것이다.

우리는 또한 끊임없이 할당 event를 Kafka data pipeline으로 publishing한다. 그리고 이는 몇몇 data store에 저장된다. Hive table에 publish된 feed는 Netflix의 내부 A/B Testing visulization and analysis tool인 Ignite와 같은 ad-hoc analysis를 위한 데이터의 기반으로 사용된다. Ignite에서 테스트 오너는 test의 결과를 평가하고 흥미로은 metric들을 분석한다. Ignite도 다음에 다시 한번 다루겠다.

우리의 tech stack에 최근에 Spark Streaming이 추가되었다. Spark Streaming은 ElasticSearch에 저장하기 전에 Kafka stream으로부터 data를 ingest하고 transform한다. 
Elastic Search는 ABlaze가 거의 실시간으로 변경사항을 보여줄 수 있게 해준다. 우리의 현재 use case는 간단한 metric들을 포함한다. 예를 들면 사용자에게 흥미있는 디멘션간의 실시간 테스트 할당들을 보여준다. 하지만 이러한 추가적인 것들은 근시일 내에 더욱 더 정교한 실시간 분석의 기반 기술들에 의지하게 될 것이다.


* Upcoming Work
우리가 설명한 아키텍쳐는 우리에게 있어서는 잘 동작한다. 우리는 더 넓은 도메인을 지원할 것이다: UI, 추천, Playback, Search, Email, Registraion 등. auto-scaling을 통해서 우리는 플랫폼의 전형적인 트래픽을 쉽게 다루고 있다. 트래픽은 초당 150K에서 450K정도 된다. 반응성 standpoint로부터, cold cache여서 할당을 fetching해야 하는 경우에는 평균 8ms정도이고 warm cache인 경우 1ms 미만으로 걸린다. 실시간 evaluation은 약간 더 걸리는 데 평균적으로 50ms정도 된다.

하지만 우리의 회원은 세계적으로 점점 확대되고 있다. 그래서 A/B Testing의 속도와 다양성 역시 급속도로 성장하고 있다. 우리가 설명한 일반적인 아키텍쳐는 2010년부터 구축되어 온것이다.(Kafka같은 명백한 예외가 있긴 하다.). 그 때 이래로..

- Netflix의 스트리밍 국가는 2개국에서 190+가 되었다
- 1000+만 회원에서 8000+만 회원이 되었다
- 수십종의 디바이스에 수천종의 디바이스가 되었다

국제적인 확장은 디바이스 종류를 증가시켜야 하는 이유 중 일부가되었다. 특히 Netflix를 스트리밍하는 모바일 디바이스가 엄청나게 늘었다. 이런 상황에서, 우리는 batch 할당에 의존하고 있다. 현재 우리의 실시간 할당 접근은 간단하게 동작하지 않는다. 모바일에서의 bandwidth는 제공할 경험을 결정하기 전에 기다려줄 만큼 신뢰성이 있지 않다. 사용자들도 로딩하는 스크린을 참을성 있게 기다리지 않는다.

추가적으로 몇몇 혁신의 새로운 영역이 A/B테스팅을 이전보다 짧은 시간의 영역으로 이끌고 있다. UI 변경에 초점이 맞춰진 테스트, 추천 알고리즘들이 그렇다. 종종 사용자 행동에 대한 명백한 효과가 . 하지만 이 post의 시작에 언급한 Adaptive streaming test는 시간에 대한것이고 내부사용자들은 즉각적인 결과를 요구한다.

결과적으로 우리 아키텍쳐의 몇몇 부분을 신중하게 개조할 계획을 가지고 있다. 예를 들어 실시간 할당 메커니즘은 granular control을 가능하게 하지만, evaluation이 더 빨라야 하고 모바일 디바이스와 더 효과적으로 interact해야한다. 

우리는 Spark Streaming을 통한 data flowing을 주어진 할당룰에 따른 할당 비율을 테스트별로 예측을 시작하는 쪽으로 레버리지하려는 계획을 가지고 있다. 목표는 실시간 할당 접근의 두번째 단점인 충분한 회원이 테스트에 할당되는 데 얼마나 시간이 걸리는지를 예측할 수 없는 부분을 해결해보려는 것이다. 할당 비율을 예측하는 능력은 분석가들이 더 정교한 테스트를 설계할 수 있게 할 것이다.

이러한 것들이 우리의 향후 도전과제들이다. 만약 우리가 어떻게 도전하고 있는지에 대해서 궁금하다면 향후에 올라오는 블로그를 잘 살펴봐라. 하지만 이러한 문제를 풀수 있는 아이디어나 Netflix의 Experimetation platform의 다음 버전이 당신을 흥분시킨다면 편하게 우리한테 연락해라.  
